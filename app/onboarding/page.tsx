'use client';

import { useState } from 'react';
import { useUser } from '@/lib/contexts/UserContext';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';
import { supabase } from '@/lib/supabase';

type OnboardingStep = 'city' | 'dealer';

export default function OnboardingPage() {
  const { user, loading } = useUser();
  const router = useRouter();
  const [currentStep, setCurrentStep] = useState<OnboardingStep>('city');
  const [selectedCity, setSelectedCity] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const cities = [
    { id: 'kyiv', name: '–ö–∏—ó–≤', icon: 'üè¢' },
    { id: 'kharkiv', name: '–•–∞—Ä–∫—ñ–≤', icon: 'üè¢' },
    { id: 'dnipro', name: '–î–Ω—ñ–ø—Ä–æ', icon: 'üè¢' },
    { id: 'odesa', name: '–û–¥–µ—Å–∞', icon: 'üè¢' },
    { id: 'lviv', name: '–õ—å–≤—ñ–≤', icon: 'üè¢' },
    { id: 'zaporizhzhia', name: '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', icon: 'üè¢' }
  ];

  const dealerCenters = {
    '–ö–∏—ó–≤': [
      { id: 'kyiv-1', name: '–ê–≤—Ç–æ—Ü–µ–Ω—Ç—Ä –Ω–∞ –°—Ç–æ–ª–∏—á–Ω–æ–º—É', icon: 'üè™' },
      { id: 'kyiv-2', name: '–ê–≤—Ç–æ—Å–∞–ª–æ–Ω –Ω–∞ –ü–µ—Ç—Ä—ñ–≤—Ü—ñ', icon: 'üè™' }
    ],
    '–•–∞—Ä–∫—ñ–≤': [
      { id: 'kharkiv-1', name: '–ê–≤—Ç–æ—Ü–µ–Ω—Ç—Ä –Ω–∞ –ì–∞–≥–∞—Ä—ñ–Ω–∞', icon: 'üè™' },
      { id: 'kharkiv-2', name: '–ê–≤—Ç–æ—Å–∞–ª–æ–Ω –Ω–∞ –ì–µ—Ä–æ—ó–≤ –ü—Ä–∞—Ü—ñ', icon: 'üè™' }
    ],
    '–î–Ω—ñ–ø—Ä–æ': [
      { id: 'dnipro-1', name: '–ê–≤—Ç–æ—Ü–µ–Ω—Ç—Ä –Ω–∞ –ù–∞–±–µ—Ä–µ–∂–Ω—ñ–π', icon: 'üè™' },
      { id: 'dnipro-2', name: '–ê–≤—Ç–æ—Å–∞–ª–æ–Ω –Ω–∞ –°–ª–æ–±–æ–∂–∞–Ω—Å—å–∫–æ–º—É', icon: 'üè™' }
    ],
    '–û–¥–µ—Å–∞': [
      { id: 'odesa-1', name: '–ê–≤—Ç–æ—Ü–µ–Ω—Ç—Ä –Ω–∞ –¢–∞—ó—Ä–æ–≤–∞', icon: 'üè™' },
      { id: 'odesa-2', name: '–ê–≤—Ç–æ—Å–∞–ª–æ–Ω –≤ –ê—Ä–∫–∞–¥—ñ—ó', icon: 'üè™' }
    ],
    '–õ—å–≤—ñ–≤': [
      { id: 'lviv-1', name: '–ê–≤—Ç–æ—Ü–µ–Ω—Ç—Ä –Ω–∞ –®–µ–≤—á–µ–Ω–∫–∞', icon: 'üè™' },
      { id: 'lviv-2', name: '–ê–≤—Ç–æ—Å–∞–ª–æ–Ω –Ω–∞ –§—Ä–∞–Ω–∫–∞', icon: 'üè™' }
    ],
    '–ó–∞–ø–æ—Ä—ñ–∂–∂—è': [
      { id: 'zaporizhzhia-1', name: '–ê–≤—Ç–æ—Ü–µ–Ω—Ç—Ä –Ω–∞ –ü–µ—Ä–µ–º–æ–≥–∏', icon: 'üè™' },
      { id: 'zaporizhzhia-2', name: '–ê–≤—Ç–æ—Å–∞–ª–æ–Ω –Ω–∞ –°–æ–±–æ—Ä–Ω–æ–º—É', icon: 'üè™' }
    ]
  };

  useEffect(() => {
    if (!loading && !user) {
      router.push('/');
    }
  }, [user, loading, router]);

  const handleCitySelect = (city: string) => {
    setSelectedCity(city);
    setCurrentStep('dealer');
  };

  const handleDealerSelect = async (dealer: string) => {
    if (!user) return;
    
    setIsSubmitting(true);
    try {
      const { error } = await supabase
        .from('users')
        .update({
          city: selectedCity,
          dealer_center: dealer,
        })
        .eq('id', user.id);

      if (error) throw error;
      
      router.push('/requests');
    } catch (error) {
      console.error('Error updating user:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (loading || isSubmitting) {
    return (
      <div className="flex justify-center items-center min-h-screen bg-tg-theme-bg">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-tg-theme-bg text-white">
      {/* –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å */}
      <div className="bg-tg-theme-section p-4 flex justify-between items-center safe-top">
        <div className="text-lg font-medium">
          {currentStep === 'city' ? '–í–∏–±—ñ—Ä –º—ñ—Å—Ç–∞' : '–í–∏–±—ñ—Ä —Ü–µ–Ω—Ç—Ä—É'}
        </div>
        <div className="text-sm text-tg-theme-hint">
          {currentStep === 'city' ? '1/2' : '2/2'}
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="p-4">
        {currentStep === 'city' ? (
          <div>
            <h2 className="text-xl mb-2">–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ</h2>
            <p className="text-tg-theme-hint mb-6">–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è</p>
            <div className="space-y-3">
              {cities.map((city) => (
                <button
                  key={city.id}
                  onClick={() => handleCitySelect(city.name)}
                  className="tg-button"
                >
                  <div className="flex items-center gap-3">
                    <div className="tg-icon-container">
                      {city.icon}
                    </div>
                    <span>{city.name}</span>
                  </div>
                  <div className="text-tg-theme-hint">‚Üí</div>
                </button>
              ))}
            </div>
          </div>
        ) : (
          <div>
            <h2 className="text-xl mb-2">–û–±–µ—Ä—ñ—Ç—å —Ü–µ–Ω—Ç—Ä</h2>
            <p className="text-tg-theme-hint mb-6">–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à –¥–∏–ª–µ—Ä—Å—å–∫–∏–π —Ü–µ–Ω—Ç—Ä</p>
            <div className="space-y-3">
              {dealerCenters[selectedCity as keyof typeof dealerCenters].map((dealer) => (
                <button
                  key={dealer.id}
                  onClick={() => handleDealerSelect(dealer.name)}
                  className="tg-button"
                >
                  <div className="flex items-center gap-3">
                    <div className="tg-icon-container">
                      {dealer.icon}
                    </div>
                    <span>{dealer.name}</span>
                  </div>
                  <div className="text-tg-theme-hint">‚Üí</div>
                </button>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* –ù–∏–∂–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è */}
      <div className="fixed bottom-0 left-0 right-0 bg-tg-theme-section p-4 flex justify-around safe-bottom">
        <button className="p-2 rounded-full bg-tg-theme-button">
          <span className="text-xl">üè†</span>
        </button>
        <button className="p-2 rounded-full bg-tg-theme-button">
          <span className="text-xl">‚ö°</span>
        </button>
        <button className="p-2 rounded-full bg-tg-theme-button">
          <span className="text-xl">‚öôÔ∏è</span>
        </button>
      </div>
    </div>
  );
} 