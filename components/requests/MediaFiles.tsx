'use client';

import { useState, useRef } from 'react';
import { Paperclip, X, Plus, Download, Trash2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import Image from 'next/image';
import { supabase } from '@/lib/supabase';

interface MediaFile {
  url: string;
  type: 'image' | 'video' | 'document';
  name?: string;
  icon?: string;
  originalName?: string;
}

interface MediaFilesProps {
  files: MediaFile[];
  requestId: string;
  onUpdate: (newFiles: MediaFile[]) => void;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó –∫–∏—Ä–∏–ª–∏—Ü—ñ —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
const sanitizeFileName = (fileName: string): string => {
  const translitMap: { [key: string]: string } = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'h', '“ë': 'g', '–¥': 'd', '–µ': 'e',
    '—î': 'ie', '–∂': 'zh', '–∑': 'z', '–∏': 'y', '—ñ': 'i', '—ó': 'yi', '–π': 'i',
    '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r',
    '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch',
    '—à': 'sh', '—â': 'shch', '—å': '', '—é': 'iu', '—è': 'ia',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'H', '“ê': 'G', '–î': 'D', '–ï': 'E',
    '–Ñ': 'Ie', '–ñ': 'Zh', '–ó': 'Z', '–ò': 'Y', '–Ü': 'I', '–á': 'Yi', '–ô': 'I',
    '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R',
    '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch',
    '–®': 'Sh', '–©': 'Shch', '–¨': '', '–Æ': 'Iu', '–Ø': 'Ia'
  };
  
  // –¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä—É—î–º–æ –∫–∏—Ä–∏–ª–∏—Ü—é
  const transliterated = fileName
    .split('')
    .map(char => translitMap[char] || char)
    .join('');
  
  // –ó–∞–º—ñ–Ω—é—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ —ñ–Ω—à—ñ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏
  return transliterated
    .replace(/[^a-zA-Z0-9.-]/g, '_')
    .replace(/_{2,}/g, '_');
};

export function MediaFiles({ files, requestId, onUpdate }: MediaFilesProps) {
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏, –¥–æ–¥–∞—é—á–∏ —ñ–º'—è —Ñ–∞–π–ª—É, —è–∫—â–æ –≤–æ–Ω–æ –≤—ñ–¥—Å—É—Ç–Ω—î
  const normalizedFiles = files.map(file => ({
    ...file,
    name: file.name || file.url.split('/').pop()?.split('?')[0] || ''
  }));

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = e.target.files;
    if (!selectedFiles) return;

    setIsUploading(true);
    try {
      const newMediaUrls = await Promise.all(
        Array.from(selectedFiles).map(async (file) => {
          const fileExt = file.name.split('.').pop()?.toLowerCase() || '';
          const cleanName = sanitizeFileName(file.name.replace(`.${fileExt}`, ''));
          const fileName = `${Date.now()}_${cleanName}.${fileExt}`;
          const filePath = `${requestId}/${fileName}`;

          console.log('Uploading file:', { filePath, originalName: file.name });

          const { error: uploadError } = await supabase.storage
            .from('request-media')
            .upload(filePath, file);

          if (uploadError) throw uploadError;

          const { data: { publicUrl } } = supabase.storage
            .from('request-media')
            .getPublicUrl(filePath);

          const fileType: MediaFile['type'] = 
            /\.(jpg|jpeg|png|gif|webp)$/i.test(fileExt) ? 'image' :
            /\.(mp4|webm|mov)$/i.test(fileExt) ? 'video' :
            'document';

          const documentIcon = 
            /\.(doc|docx)$/i.test(fileExt) ? 'üìù' :
            /\.(xls|xlsx)$/i.test(fileExt) ? 'üìä' :
            /\.(pdf)$/i.test(fileExt) ? 'üìÑ' :
            'üìé';

          return {
            url: publicUrl,
            type: fileType,
            name: fileName,
            icon: fileType === 'document' ? documentIcon : undefined,
            originalName: file.name
          };
        })
      );

      const updatedFiles = [...normalizedFiles, ...newMediaUrls];
      
      console.log('Updating database with files:', updatedFiles);

      const { error: updateError } = await supabase
        .from('requests')
        .update({ 
          media_urls: updatedFiles,
          updated_at: new Date().toISOString()
        })
        .eq('id', requestId)
        .single();
      
      if (updateError) throw updateError;
      
      onUpdate(updatedFiles);
    } catch (error) {
      console.error('Error uploading files:', error);
      if (error instanceof Error) {
        alert(error.message);
      } else {
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤');
      }
    } finally {
      setIsUploading(false);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  const handleDelete = async (fileUrl: string, index: number) => {
    try {
      if (!fileUrl || !normalizedFiles[index]) {
        throw new Error('URL —Ñ–∞–π–ª—É –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      }
      
      const filePath = `${requestId}/${normalizedFiles[index].name}`;
      
      console.log('Deleting file:', filePath);
      
      const { error: deleteError } = await supabase.storage
        .from('request-media')
        .remove([filePath]);

      if (deleteError) {
        console.error('Storage delete error:', deleteError);
        throw deleteError;
      }

      const newFiles = normalizedFiles.filter((_, i) => i !== index);
      
      console.log('Updating database after deletion:', newFiles);

      const { error: updateError } = await supabase
        .from('requests')
        .update({ 
          media_urls: newFiles,
          updated_at: new Date().toISOString()
        })
        .eq('id', requestId)
        .single();
      
      if (updateError) {
        console.error('Database update error:', updateError);
        throw updateError;
      }
      
      onUpdate(newFiles);
    } catch (error) {
      console.error('Error deleting file:', error);
      if (error instanceof Error) {
        alert(error.message);
      } else {
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É');
      }
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2 text-tg-theme-hint">
          <Paperclip size={16} className="rotate-45" />
          <span>–í–∫–ª–∞–¥–µ–Ω–Ω—è ({normalizedFiles?.length || 0})</span>
        </div>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => fileInputRef.current?.click()}
          disabled={isUploading}
          className="text-blue-500 hover:bg-blue-500/10"
        >
          {isUploading ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...' : (
            <>
              <Plus size={16} className="mr-1" />
              –î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª
            </>
          )}
        </Button>
        <input
          ref={fileInputRef}
          type="file"
          multiple
          onChange={handleFileSelect}
          className="hidden"
          accept="image/*,video/*,.pdf,.doc,.docx"
        />
      </div>

      <div className="flex flex-wrap gap-3">
        {normalizedFiles?.map((file, index) => {
          const fileType = file.type || (
            /\.(jpg|jpeg|png|gif|webp)$/i.test(file.url) ? 'image' :
            /\.(mp4|webm|mov)$/i.test(file.url) ? 'video' :
            'document'
          );

          const fileExt = file.originalName?.split('.').pop()?.toLowerCase() || 
            file.url.split('.').pop()?.split('?')[0]?.toLowerCase() || '';

          const documentIcon = file.icon || (
            /\.(doc|docx)$/i.test(fileExt) ? 'üìù' :
            /\.(xls|xlsx)$/i.test(fileExt) ? 'üìä' :
            /\.(pdf)$/i.test(fileExt) ? 'üìÑ' :
            'üìé'
          );

          return (
            <div
              key={file.url + index}
              className="relative group rounded-lg overflow-hidden bg-tg-theme-section/50 backdrop-blur-sm w-[160px]"
            >
              {fileType === 'image' ? (
                <div className="aspect-square relative">
                  <Image
                    src={file.url || ''}
                    alt=""
                    fill
                    unoptimized
                    loading="eager"
                    className="object-cover"
                  />
                </div>
              ) : (
                <div className="aspect-square flex flex-col items-center justify-center gap-2">
                  <span className="text-2xl">
                    {fileType === 'video' ? 'üé•' : documentIcon}
                  </span>
                  <span className="text-xs text-tg-theme-hint px-2 text-center truncate max-w-full">
                    {file.originalName || fileExt.toUpperCase()}
                  </span>
                </div>
              )}
              <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/30 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-200 flex items-center justify-center gap-2">
                <Button
                  variant="ghost"
                  size="icon"
                  className="text-white hover:bg-blue-500/20"
                  onClick={(e) => {
                    e.stopPropagation();
                    if (file?.url) {
                      const link = document.createElement('a');
                      link.href = file.url;
                      link.download = file.originalName || '';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);
                    }
                  }}
                >
                  <Download size={18} />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="text-white hover:bg-red-500/20"
                  onClick={(e) => {
                    e.stopPropagation();
                    if (file?.url) handleDelete(file.url, index);
                  }}
                >
                  <Trash2 size={18} />
                </Button>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
} 